{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://general_setup/./src/components/base-component.ts","webpack://general_setup/./src/decorators/autobind.ts","webpack://general_setup/./src/models/project.ts","webpack://general_setup/./src/state/project-state.ts","webpack://general_setup/./src/components/project-item.ts","webpack://general_setup/./src/components/project-list.ts","webpack://general_setup/./src/util/validation.ts","webpack://general_setup/./src/components/project-input.ts","webpack://general_setup/./src/app.ts"],"sourcesContent":["// Component Base Class\r\nexport default abstract class Component<T extends HTMLElement, U extends HTMLElement> {\r\n  templateElement: HTMLTemplateElement;\r\n  hostElement: T;\r\n  element: U;\r\n\r\n  constructor(\r\n    templateId: string,\r\n    hostElementId: string,\r\n    insertAtStart: boolean,\r\n    newElementId?: string\r\n  ) {\r\n    this.templateElement = document.getElementById(\r\n      templateId\r\n    )! as HTMLTemplateElement;\r\n    this.hostElement = document.getElementById(hostElementId)! as T;\r\n\r\n    const importedNode = document.importNode(\r\n      this.templateElement.content,\r\n      true\r\n    );\r\n    this.element = importedNode.firstElementChild as U;\r\n    if (newElementId) {\r\n      this.element.id = newElementId;\r\n    }\r\n\r\n    this.attach(insertAtStart);\r\n  }\r\n\r\n  private attach(insertAtBeginning: boolean) {\r\n    this.hostElement.insertAdjacentElement(\r\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\r\n      this.element\r\n    );\r\n  }\r\n\r\n  abstract configure(): void;\r\n  abstract renderContent(): void;\r\n}\r\n","//autobind decorator\r\nexport function Autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\r\n  const originalMethod = descriptor.value;\r\n  const adjDescriptor: PropertyDescriptor = {\r\n    configurable: true,\r\n    get() {\r\n      return originalMethod.bind(this);\r\n    },\r\n  };\r\n  return adjDescriptor;\r\n}\r\n","export enum ProjectStatus {\r\n  Active,\r\n  Finished,\r\n}\r\n\r\nexport class Project {\r\n  constructor(\r\n    public id: string,\r\n    public title: string,\r\n    public description: string,\r\n    public people: number,\r\n    public status: ProjectStatus\r\n  ) {}\r\n}\r\n","import { Project, ProjectStatus } from \"./../models/project\";\r\n\r\n// Project State Management\r\ntype Listener<T> = (items: T[]) => void;\r\n\r\nclass State<T> {\r\n  protected listeners: Listener<T>[] = [];\r\n\r\n  addListener(listenerFn: Listener<T>) {\r\n    this.listeners.push(listenerFn);\r\n  }\r\n}\r\n\r\nexport class ProjectState extends State<Project> {\r\n  private projects: Project[] = [];\r\n  private static instance: ProjectState;\r\n\r\n  private constructor() {\r\n    super();\r\n  }\r\n\r\n  static getInstance() {\r\n    if (this.instance) {\r\n      return this.instance;\r\n    }\r\n    this.instance = new ProjectState();\r\n    return this.instance;\r\n  }\r\n\r\n  addProject(title: string, description: string, numOfPeople: number) {\r\n    const newProject = new Project(\r\n      Math.random().toString(),\r\n      title,\r\n      description,\r\n      numOfPeople,\r\n      ProjectStatus.Active\r\n    );\r\n    this.projects.push(newProject);\r\n    this.updateListeners();\r\n  }\r\n\r\n  moveProject(projectId: string, newStatus: ProjectStatus) {\r\n    const project = this.projects.find((p) => p.id === projectId);\r\n    if (project && project.status !== newStatus) {\r\n      project.status = newStatus;\r\n      this.updateListeners();\r\n    }\r\n  }\r\n\r\n  private updateListeners() {\r\n    for (const listenerFn of this.listeners) {\r\n      listenerFn([...this.projects]);\r\n    }\r\n  }\r\n}\r\n\r\nexport const projectState = ProjectState.getInstance();\r\n","import Component from \"./base-component\";\r\nimport { Project } from \"../models/project\";\r\nimport { Draggable } from \"../models/drag-drop\";\r\nimport { Autobind } from \"../decorators/autobind\";\r\n\r\n// ProjectItem Class\r\n\r\nexport class ProjectItem\r\n  extends Component<HTMLUListElement, HTMLLIElement>\r\n  implements Draggable\r\n{\r\n  private project: Project;\r\n\r\n  get persons() {\r\n    if (this.project.people === 1) {\r\n      return \"1 person\";\r\n    } else {\r\n      return `${this.project.people} persons`;\r\n    }\r\n  }\r\n\r\n  constructor(hostId: string, project: Project) {\r\n    super(\"single-project\", hostId, false, project.id);\r\n    this.project = project;\r\n\r\n    this.renderContent();\r\n    this.configure();\r\n  }\r\n\r\n  @Autobind\r\n  dragStartHandler(event: DragEvent): void {\r\n    event.dataTransfer!.setData(\"text/plain\", this.project.id);\r\n    event.dataTransfer!.effectAllowed = \"move\";\r\n  }\r\n\r\n  dragEndHandler(_: DragEvent): void {\r\n    console.log(\"DRagENDd\");\r\n  }\r\n\r\n  configure(): void {\r\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\r\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\r\n  }\r\n\r\n  renderContent(): void {\r\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\r\n    this.element.querySelector(\"h3\")!.textContent = this.persons + \" assigned\";\r\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\r\n  }\r\n}\r\n","import Component from \"./base-component\";\r\nimport { Project } from \"../models/project\";\r\nimport { DragTarget } from \"../models/drag-drop\";\r\nimport { Autobind } from \"../decorators/autobind\";\r\nimport { projectState } from \"../state/project-state\";\r\nimport { ProjectStatus } from \"../models/project\";\r\nimport { ProjectItem } from \"./project-item\";\r\n\r\n// ProjectList Class\r\n\r\nexport class ProjectList\r\n  extends Component<HTMLDivElement, HTMLElement>\r\n  implements DragTarget\r\n{\r\n  assignedProjects: Project[];\r\n\r\n  constructor(private type: \"active\" | \"finished\") {\r\n    super(\"project-list\", \"app\", false, `${type}-projects`);\r\n    this.assignedProjects = [];\r\n\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n\r\n  private renderProjects() {\r\n    const listEl = document.getElementById(\r\n      `${this.type}-projects-list`\r\n    )! as HTMLUListElement;\r\n    console.log(this.assignedProjects);\r\n    listEl.innerHTML = \"\";\r\n    for (const prjItem of this.assignedProjects) {\r\n      new ProjectItem(this.element.querySelector(\"ul\")!.id, prjItem);\r\n    }\r\n  }\r\n\r\n  @Autobind\r\n  dragOverHandler(event: DragEvent): void {\r\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\r\n      event.preventDefault();\r\n      const listEl = this.element.querySelector(\"ul\")!;\r\n      listEl.classList.add(\"droppable\");\r\n    }\r\n  }\r\n\r\n  @Autobind\r\n  dropHandler(event: DragEvent): void {\r\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\r\n    projectState.moveProject(\r\n      prjId,\r\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\r\n    );\r\n  }\r\n\r\n  @Autobind\r\n  dragLeaveHandler(event: DragEvent): void {\r\n    const listEl = this.element.querySelector(\"ul\")!;\r\n    listEl.classList.remove(\"droppable\");\r\n  }\r\n\r\n  configure(): void {\r\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\r\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\r\n    this.element.addEventListener(\"drop\", this.dropHandler);\r\n\r\n    projectState.addListener((projects: Project[]) => {\r\n      const relevantProjects = projects.filter((prj) => {\r\n        if (this.type === \"active\") {\r\n          return prj.status === ProjectStatus.Active;\r\n        }\r\n        return prj.status === ProjectStatus.Finished;\r\n      });\r\n      this.assignedProjects = relevantProjects;\r\n      this.renderProjects();\r\n    });\r\n  }\r\n\r\n  renderContent() {\r\n    const listId = `${this.type}-projects-list`;\r\n    this.element.querySelector(\"ul\")!.id = listId;\r\n    this.element.querySelector(\"h2\")!.textContent =\r\n      this.type.toUpperCase() + \" PROJECTS\";\r\n  }\r\n}\r\n","// Validation\r\n  export interface Validatable {\r\n    value: string | number;\r\n    required?: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    min?: number;\r\n    max?: number;\r\n  }\r\n\r\n  export function validate(validatableInput: Validatable) {\r\n    let isValid = true;\r\n    if (validatableInput.required) {\r\n      isValid =\r\n        isValid && validatableInput.value.toString().trim().length !== 0;\r\n    }\r\n    if (\r\n      validatableInput.minLength != null &&\r\n      typeof validatableInput.value === \"string\"\r\n    ) {\r\n      isValid =\r\n        isValid &&\r\n        validatableInput.value.trim().length >= validatableInput.minLength;\r\n    }\r\n    if (\r\n      validatableInput.maxLength != null &&\r\n      typeof validatableInput.value === \"string\"\r\n    ) {\r\n      isValid =\r\n        isValid &&\r\n        validatableInput.value.trim().length <= validatableInput.maxLength;\r\n    }\r\n    if (\r\n      validatableInput.min != null &&\r\n      typeof validatableInput.value === \"number\"\r\n    ) {\r\n      isValid = isValid && validatableInput.value >= validatableInput.min;\r\n    }\r\n    if (\r\n      validatableInput.max != null &&\r\n      typeof validatableInput.value === \"number\"\r\n    ) {\r\n      isValid = isValid && validatableInput.value <= validatableInput.max;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n","import Component from \"./base-component\";\r\nimport * as Validation from \"../util/validation\";\r\nimport { Autobind } from \"../decorators/autobind\";\r\nimport { projectState as ProjectState } from \"../state/project-state\";\r\n\r\n// ProjectInput CLass\r\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\r\n  titleInputElement: HTMLInputElement;\r\n  descriptionInputElement: HTMLInputElement;\r\n  peopleInputElement: HTMLInputElement;\r\n\r\n  constructor() {\r\n    super(\"project-input\", \"app\", true, \"user-input\");\r\n    this.titleInputElement = this.element.querySelector(\r\n      \"#title\"\r\n    ) as HTMLInputElement;\r\n    this.descriptionInputElement = this.element.querySelector(\r\n      \"#description\"\r\n    ) as HTMLInputElement;\r\n    this.peopleInputElement = this.element.querySelector(\r\n      \"#people\"\r\n    ) as HTMLInputElement;\r\n    this.configure();\r\n  }\r\n\r\n  private gatherUserInput(): [string, string, number] | void {\r\n    const enteredTitle = this.titleInputElement.value;\r\n    const enteredDescription = this.descriptionInputElement.value;\r\n    const enteredPeople = +this.peopleInputElement.value;\r\n\r\n    const titleValidatable: Validation.Validatable = {\r\n      value: enteredTitle,\r\n      required: true,\r\n    };\r\n\r\n    const descriptionValidatable: Validation.Validatable = {\r\n      value: enteredDescription,\r\n      required: true,\r\n      minLength: 5,\r\n    };\r\n\r\n    const peopleValidatable: Validation.Validatable = {\r\n      value: enteredPeople,\r\n      required: true,\r\n      min: 1,\r\n      max: 5,\r\n    };\r\n\r\n    if (\r\n      !Validation.validate(titleValidatable) ||\r\n      !Validation.validate(descriptionValidatable) ||\r\n      !Validation.validate(peopleValidatable)\r\n    ) {\r\n      alert(\"Invalid input, please try again!\");\r\n      return;\r\n    } else {\r\n      return [enteredTitle, enteredDescription, +enteredPeople];\r\n    }\r\n  }\r\n\r\n  private clearInputs() {\r\n    this.titleInputElement.value = \"\";\r\n    this.descriptionInputElement.value = \"\";\r\n    this.peopleInputElement.value = \"\";\r\n  }\r\n\r\n  @Autobind\r\n  private submitHandler(event: Event) {\r\n    event.preventDefault();\r\n    const userInput = this.gatherUserInput();\r\n    if (Array.isArray(userInput)) {\r\n      const [title, description, people] = userInput;\r\n      ProjectState?.addProject(title, description, people);\r\n      console.log(ProjectState);\r\n      console.log(title, description, people);\r\n      this.clearInputs();\r\n    }\r\n    // console.log(this.titleInputElement.value);\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"submit\", this.submitHandler);\r\n  }\r\n\r\n  renderContent() {}\r\n}\r\n","import { ProjectList } from \"./components/project-list\";\r\nimport { ProjectInput } from \"./components/project-input\";\r\n\r\nnew ProjectInput();\r\nnew ProjectList(\"active\");\r\nnew ProjectList(\"finished\");\r\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","Autobind","_","_2","descriptor","originalMethod","value","configurable","get","bind","ProjectStatus","Project","title","description","people","status","ProjectState","listeners","addListener","listenerFn","push","super","projects","static","instance","addProject","numOfPeople","newProject","Math","random","toString","Active","updateListeners","moveProject","projectId","newStatus","project","find","p","projectState","getInstance","ProjectItem","hostId","renderContent","configure","persons","dragStartHandler","event","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","addEventListener","querySelector","textContent","ProjectList","type","assignedProjects","renderProjects","listEl","innerHTML","prjItem","dragOverHandler","types","preventDefault","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","prj","listId","toUpperCase","validate","validatableInput","isValid","required","trim","length","minLength","maxLength","min","max","ProjectInput","titleInputElement","descriptionInputElement","peopleInputElement","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","alert","clearInputs","submitHandler","userInput","Array","isArray"],"sourceRoot":""}